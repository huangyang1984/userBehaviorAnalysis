<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

<!-- 批量处理源数据任务 可通过定时任务触发 -->
	
	<!--   JOB REPOSITORY - WE USE IN-MEMORY REPOSITORY FOR OUR EXAMPLE -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	
	<!-- batch config -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!--  FINALLY OUR JOB DEFINITION. THIS IS A 1 STEP JOB -->
<!-- 	<batch:job id="ledgerJob">
		<batch:listeners>
			<batch:listener ref="appJobExecutionListener" />
		</batch:listeners>
		<batch:step id="step1">
			<batch:tasklet>
				<batch:listeners>
					<batch:listener ref="itemFailureLoggerListener" />
				</batch:listeners>
				<batch:chunk reader="ledgerReader" writer="ledgerWriter"
					commit-interval="10000" /> 1万条进行一次commit
			</batch:tasklet>
		</batch:step>
	</batch:job> -->
	
<!-- 	<batch:job id="ledgerJob">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="ledgerReader" writer="ledgerWriter"
					commit-interval="1000" />
			</batch:tasklet>
		</batch:step>
	</batch:job> -->
	 
<!-- 	<bean id="appJobExecutionListener" class="net.ufida.info.mahout.job.AppJobExecutionListener"></bean> 
	<bean id="itemFailureLoggerListener" class="net.ufida.info.mahout.job.ItemFailureLoggerListener"></bean>  -->
	 
	 
	 <batch:job id="simpleJob">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="cursorReader" writer="flatFileWriter"
					commit-interval="10000" />
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- ======================================================= -->
	<!-- 6) READER -->
	<!-- ======================================================= -->
	<bean id="cursorReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource" />
		<property name="sql" value="select * from tmp_good_order" />
		<property name="rowMapper" ref="basicRemmenderModelRowMapper" />
	</bean>


	<!-- ======================================================= -->
	<!-- 7) WRITER -->
	<!-- ======================================================= -->
	<bean id="flatFileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="hdfs://dev.localdomain:9000/mahoutBatch/data.dat" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="userId,productId,indicator" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	 
	 
	<!--  READER -->
	<!-- <bean id="ledgerReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource" />
		<property name="sql" value="select * from tmp_good_order" /> 
		<property name="rowMapper" ref="basicRemmenderModelRowMapper" />
	</bean> -->
	
	<bean id="basicRemmenderModelRowMapper" class="net.ufida.info.mahout.job.BasicRemmenderModelRowMapper"></bean>
	
	<!-- <bean id="ledgerWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:c:/temp/ledgers-output.txt" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="userId,productId,indicator" />
					</bean>
				</property>
			</bean>
		</property>
	</bean> -->
	 
	 
	<!-- Spring Batch Job同一个job instance，成功执行后是不允许重新执行的【失败后是否允许重跑，可通过配置Job的restartable参数来控制，默认是true】，如果需要重新执行，可以变通处理，
		添加一个JobParameters构建类,以当前时间作为参数，保证其他参数相同的情况下却是不同的job instance -->
<!-- 	<bean id="jobParameterBulider" class="org.springframework.batch.core.JobParametersBuilder" /> -->

    <bean id="quartzLedgerJob" class="net.ufida.info.mahout.job.QuartzLedgerJob">
        <property name="jobLauncher" ref="jobLauncher"></property>
        <property name="simpleJob"  ref="simpleJob"></property>
    </bean> 
	
	<!-- 定时任务 开始 -->  
	<bean id="ledgerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
		<property name="targetObject">  
			<!-- 定时执行的类 -->  
			<ref bean="quartzLedgerJob" />  
		</property>  
		<property name="targetMethod">  
			<!-- 定时执行的类方法   -->
			<value>execute</value>  
		</property>  
	</bean>  
  
     
	 <bean id="ledgerCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean" >  
		<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->  
		<property name="jobDetail" >  
			<ref bean="ledgerJobDetail" />  
		</property>  
		<!-- 在每天下午18点到下午18:59期间的每1分钟触发   
		在每天上午10点40分准时触发    -->
		<property name="cronExpression" >  
			<!-- <value>0 * 15 * * ?</value>
			<value>0 45 10 * * ? * </value>  -->
		    <value>5 0/1 * * * ? *</value>  
		</property>  
	</bean>   
      
	<!-- 触发器工厂，将所有的定时任务都注入工厂-->  
	 <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
		<!-- 添加触发器   -->
		<property name="triggers">  
			<list>  
				<!-- 将上面定义的测试定时任务注入（可以定义多个定时任务，同时注入）   -->
				<ref local="ledgerCronTrigger" />  
			</list>  
		</property>  
	</bean>   
	<!-- 定时任务 结束 -->  
</beans>  